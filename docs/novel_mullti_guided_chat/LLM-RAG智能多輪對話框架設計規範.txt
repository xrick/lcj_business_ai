# LLM-RAG 智能多輪對話框架設計規範

## 一、框架概述
請設計一套完整的 LLM-RAG（大型語言模型-檢索增強生成）多輪對話框架，該框架應具備智能意圖識別、動態問題引導、上下文管理和知識檢索增強等核心功能。

## 二、詳細設計要求

### Step 1: 初始化階段 - General Prompt 設計
- 設計一個通用型初始提示詞模板（general_prompt），用於：
  - 接收並理解使用者的第一個查詢（q1）
  - 建立友善的對話開端
  - 設定對話的基調和範圍
  - 包含必要的系統指令和約束條件

### Step 2: 首次交互處理
- 實現機制將 general_prompt 與 q1 智能結合
- 傳送給 LLM 進行處理，生成初始輸出（out1）
- out1 應包含：
  - 對使用者查詢的初步理解
  - 相關領域的基礎回應
  - 潛在的後續互動方向

### Step 3: 意圖分析模組設計
- 創建專門的分析提示詞（analyze_prompt1），功能包括：
  - 深度解析使用者的真實意圖
  - 提取關鍵實體、概念和關係
  - 評估查詢的完整性和明確度
  - 識別潛在的歧義或資訊缺口

### Step 4: 智能決策與分支處理
將 analyze_prompt1 與 out1 結合進行深度分析，根據結果執行不同策略：

#### Step 4.1: 高置信度路徑（意圖明確）
當滿足以下條件時執行：
- 使用者意圖清晰度 > 80%
- 關鍵字覆蓋率充足
- 具備足夠的上下文資訊

執行動作：
- 啟動 RAG 檢索機制，從知識庫中提取相關資訊
- 生成精準、個性化的回應
- 提供額外的相關建議或深入選項

#### Step 4.2: 引導式澄清路徑（意圖模糊）
當出現以下情況時觸發：
- 使用者意圖不明確或存在多種可能
- 關鍵資訊缺失
- 查詢過於寬泛或抽象

執行策略：
- 設計 3-5 個漸進式引導問題
- 問題應具備以下特性：
  - 開放性與封閉性問題結合
  - 從廣泛到具體的漏斗式設計
  - 包含範例或選項以降低認知負擔
- 建立決策樹結構，根據使用者回答動態調整後續問題

### Step 5: 迭代優化機制
- 實現對話歷史追蹤和上下文累積
- 每輪對話後更新使用者畫像和偏好
- 動態調整提示詞策略
- 建立反饋循環以持續改進

## 三、技術實現要點
1. **提示詞工程**：每個提示詞應包含明確的角色定義、任務說明、輸出格式要求
2. **狀態管理**：維護對話狀態機，追蹤當前對話階段和歷史資訊
3. **評分機制**：建立意圖明確度和關鍵字相關性的量化評分系統
4. **錯誤處理**：設計優雅的降級策略和異常處理流程
5. **性能優化**：考慮快取機制和並行處理以提升響應速度

## 四、輸出要求
請提供：
1. 各階段提示詞的具體模板和範例
2. 完整的對話流程圖
3. 意圖分析的評分標準和閾值設定
4. 至少 2 個完整的對話場景演示
5. 框架的可擴展性設計說明
